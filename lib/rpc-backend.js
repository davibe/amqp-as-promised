// Generated by CoffeeScript 1.7.1
(function() {
  var Q, RpcBackend, log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = require('bog');

  Q = require('q');

  module.exports = RpcBackend = (function() {
    function RpcBackend(amqpc) {
      this.amqpc = amqpc;
      this.serve = __bind(this.serve, this);
    }

    RpcBackend.prototype.serve = function(exname, topic, callback) {
      return Q.all([
        this.amqpc.exchange(exname, {
          type: 'topic',
          durable: true,
          autoDelete: false
        }), this.amqpc.exchange(''), this.amqpc.queue("" + exname + "." + topic, {
          durable: true,
          autoDelete: false
        })
      ]).spread((function(_this) {
        return function(ex, defaultex, queue) {
          queue.bind(ex, topic);
          return queue.subscribe(_this._mkcallback(defaultex, callback));
        };
      })(this));
    };

    RpcBackend.prototype._mkcallback = function(exchange, handler) {
      return function(msg, headers, info) {
        var opts, timeout, timestamp, _ref;
        if (info.replyTo == null) {
          return;
        }
        timestamp = (_ref = headers != null ? headers.timestamp : void 0) != null ? _ref : (info != null ? info.timestamp : void 0) * 1000;
        timeout = headers != null ? headers.timeout : void 0;
        if (timestamp && timeout) {
          if (typeof timestamp === 'string') {
            timestamp = new Date(timestamp).getTime();
          }
          if (Date.now() > timestamp + timeout) {
            log.info("Discarding timed out message (" + info.replyTo + ", " + info.correlationId + ")");
            return;
          }
        }
        opts = {};
        if (info.correlationId != null) {
          opts.correlationId = info.correlationId;
        }
        return Q.when(handler(msg, headers)).then(function(res) {
          return exchange.publish(info.replyTo, res, opts);
        }).fail(function(err) {
          log.error(err);
          return exchange.publish(info.replyTo, {
            error: err.message
          }, opts);
        }).done();
      };
    };

    return RpcBackend;

  })();

}).call(this);

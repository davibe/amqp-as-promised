// Generated by CoffeeScript 1.7.1
(function() {
  var I, Q, comp, compress, decomp, decompress, jsonp, plug, zlib;

  Q = require('q');

  zlib = require('zlib');

  plug = function(rs, rj) {
    return function(err, res) {
      if (err) {
        return rj(err);
      } else {
        return rs(res);
      }
    };
  };

  comp = function(buf) {
    return Q.Promise(function(rs, rj) {
      return zlib.gzip(buf, plug(rs, rj));
    });
  };

  decomp = function(buf) {
    return Q.Promise(function(rs, rj) {
      return zlib.gunzip(buf, plug(rs, rj));
    });
  };

  jsonp = function(str) {
    return Q.Promise(function(rs, rj) {
      var err;
      try {
        return rs(JSON.parse(str));
      } catch (_error) {
        err = _error;
        return rj(err);
      }
    });
  };

  I = function(v) {
    return v;
  };

  compress = function(msg, props) {
    if (props != null ? props.compress : void 0) {
      if (Buffer.isBuffer(msg)) {
        return [
          {
            compress: 'buffer'
          }, comp(msg)
        ];
      } else {
        return [
          {
            compress: 'json'
          }, comp(Buffer(JSON.stringify(msg)))
        ];
      }
    } else {
      return [null, Q(msg)];
    }
  };

  decompress = function(msg, props) {
    var data, _ref;
    if (props != null ? props.compress : void 0) {
      data = (_ref = msg != null ? msg.data : void 0) != null ? _ref : msg;
      if (props.compress === 'buffer') {
        return ['application/octet-stream', decomp(data)];
      } else if (props.compress === 'json') {
        return [
          'application/json', decomp(data).then(function(buf) {
            return jsonp(buf.toString());
          })
        ];
      } else {
        return [null, Q(msg)];
      }
    } else {
      return [null, Q(msg)];
    }
  };

  module.exports = {
    compress: compress,
    decompress: decompress
  };

}).call(this);
